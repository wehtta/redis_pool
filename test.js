// Generated by CoffeeScript 1.7.1
var Pool, RedisPool, should, sinon;

should = require("should");

RedisPool = require("./redispool.js");

sinon = require("sinon");

Pool = require("./pool.js");

describe("function behaviour test", function() {
  return it("unit test RedisPool.acquire", function(done) {
    var spy, spy1, spy2;
    spy = sinon.spy(RedisPool, "acquire");
    spy1 = sinon.spy(RedisPool, "release");
    spy2 = sinon.spy(RedisPool, "destroy");
    return RedisPool.execcmd("flushdb", function(err, result) {
      if (err) {
        return done(err);
      } else {
        spy.calledOnce.should.equal(true);
        spy1.called.should.equal(true);
        return done();
      }
    });
  });
});

describe("client pool test ", function() {
  it("test the ensure minimum", function(done) {
    var createCounter, destroyCounter, factory, testPool;
    createCounter = 0;
    destroyCounter = 0;
    factory = {
      name: "redis",
      create: function(callback) {
        return callback(null, ++createCounter);
      },
      destroy: function(callback) {
        return callback(null, ++destroyCounter);
      },
      idleTimeoutMillis: 30000,
      log: false,
      max: 10,
      min: 3
    };
    testPool = Pool.Pool(factory);
    createCounter.should.equal(3);
    return done();
  });
  return it("test the limit to maximum", function(done) {
    var createCounter, destroyCounter, factory, i, res, testPool, _i;
    createCounter = 0;
    destroyCounter = 0;
    factory = {
      name: "redis",
      create: function(callback) {
        return callback(null, ++createCounter);
      },
      destroy: function() {
        return callback(null, ++destroyCounter);
      },
      idleTimeoutMillis: 3000,
      log: false,
      max: 10,
      min: 3
    };
    testPool = Pool.Pool(factory);
    for (i = _i = 1; _i <= 20; i = ++_i) {
      res = testPool.acquire(function(err, counter) {
        return typeof counter === "number";
      });
      console.log(res);
      if (!res) {
        testPool.count.should.equal(11);
        break;
      }
    }
    return done();
  });
});

describe("test RedisRedisPool", function() {
  before(function(done) {
    return RedisPool.execcmd("flushdb", function(err, result) {
      if (err) {
        return done(err);
      } else {
        console.log("clear redis data");
        result.should.equal("OK");
        return done();
      }
    });
  });
  it("test redis set cmd and renamecmd", function(done) {
    return RedisPool.execcmd("set", "hainan", "haikou", function(err, result) {
      if (err) {
        return done(err);
      } else {
        result.should.equal("OK");
        return done();
      }
    });
  });
  it("test redisRedisPool hmset cmd", function(done) {
    return RedisPool.execcmd("hmset", "student", "name", "Jim", "location", "beijing", function(err, result) {
      if (err) {
        return done(err);
      } else {
        console.log(result);
        result.should.equal("OK");
        return RedisPool.execcmd("hgetall", "student", function(err, res) {
          if (err) {
            return done(err);
          } else {
            console.log(res);
            res.should.eql({
              "name": "Jim",
              "location": "beijing"
            });
            return done();
          }
        });
      }
    });
  });
  it("test redisRedisPool rename", function(done) {
    return RedisPool.execcmd("rename", "hainan", "renamekey", function(err, result) {
      if (err) {
        return done(err);
      } else {
        result.should.equal("OK");
        return RedisPool.execcmd("get", "renamekey", function(err, res) {
          if (err) {
            return done(err);
          } else {
            console.log(res);
            res.should.equal("haikou");
            return done();
          }
        });
      }
    });
  });
  it("test redisRedisPool hdel", function(done) {
    return RedisPool.execcmd("hdel", "student", "location", "beijing", function(err, result) {
      if (err) {
        return done(err);
      } else {
        return RedisPool.execcmd("hgetall", "student", function(err, res) {
          if (err) {
            return done(err);
          } else {
            res.should.eql({
              "name": "Jim"
            });
            return done();
          }
        });
      }
    });
  });
  return it("test redisRedisPool push and pop", function(done) {
    return RedisPool.execcmd("lpush", "city", "shanghai", "beijing", function(err, result) {
      if (err) {
        return done(err);
      } else {
        return RedisPool.execcmd("rpop", "city", function(err, res) {
          if (err) {
            return done(err);
          } else {
            res.should.equal("shanghai");
            return done();
          }
        });
      }
    });
  });
});
